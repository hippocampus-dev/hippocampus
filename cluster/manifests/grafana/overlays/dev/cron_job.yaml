apiVersion: batch/v1
kind: CronJob
metadata:
  name: grafana-cache-warmer
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  startingDeadlineSeconds: 3600
  schedule: "*/30 * * * *"
  jobTemplate:
    spec:
      completions: 1
      parallelism: 1
      completionMode: Indexed
      backoffLimitPerIndex: 6
      maxFailedIndexes: 1
      podReplacementPolicy: Failed
      podFailurePolicy:
        rules:
          - action: Ignore
            onPodConditions:
              - type: DisruptionTarget
                status: "True"
      template:
        metadata:
          labels:
            app.kubernetes.io/name: grafana-cache-warmer
            sidecar.istio.io/inject: "true"
          annotations:
            sidecar.istio.io/proxyCPULimit: 1000m
            sidecar.istio.io/proxyMemoryLimit: 128Mi
            sidecar.istio.io/proxyCPU: 30m
            sidecar.istio.io/proxyMemory: 64Mi
        spec:
          restartPolicy: Never
          securityContext:
            seccompProfile:
              type: RuntimeDefault
          containers:
            - name: grafana-cache-warmer
              securityContext:
                privileged: false
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
                runAsUser: 65532
                runAsNonRoot: true
                seccompProfile:
                  type: RuntimeDefault
              image: ghcr.io/kaidotio/hippocampus/headless-page-renderer
              imagePullPolicy: IfNotPresent
              command:
                - sh
              args:
                - -c
                - python main.py $(python -c 'import os, requests; print(",".join([os.getenv("GRAFANA_TARGET") + item["url"] + "?" + os.getenv("QUERY_STRING") for item in requests.get(os.getenv("GRAFANA_TARGET") + "api/search").json() if item["type"] == "dash-db"]))')
              env:
                - name: GRAFANA_TARGET
                  value: http://grafana.grafana.svc.cluster.local:3000/
                - name: QUERY_STRING
                  value: ""
