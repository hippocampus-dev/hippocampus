apiVersion: 1
datasources:
  - name: Alertmanager
    type: alertmanager
    url: http://mimir-alertmanager.mimir.svc.cluster.local:3100
    access: proxy
    jsonData:
      implementation: mimir
      handleGrafanaManagedAlerts: true
  - name: Prometheus
    type: prometheus
    uid: prometheus
    access: proxy
    url: http://mimir-proxy.mimir.svc.cluster.local:8080/prometheus
  - name: Loki
    type: loki
    uid: loki
    access: proxy
    url: http://loki-proxy.loki.svc.cluster.local:8080
    jsonData:
      maxLines: 100
      timeInterval: 1m
      derivedFields:
        - datasourceUid: tempo
          matcherRegex: (?:"?[^="]*traceparent[^="]*"?[=:]"?\d{2}-|"?[^="]*traceid[^="]*"?[=:]"?)(\w{32})(?:-\w{16}-\d{2}"?|"?)
          name: TraceID
          url: $${__value.raw}
  - name: Tempo
    type: tempo
    uid: tempo
    url: http://tempo-query-frontend.tempo.svc.cluster.local:3100
    jsonData:
      tracesToLogsV2:
        datasourceUid: loki
        spanStartTimeShift: 30s
        spanEndTimeShift: -30s
        customQuery: true
        query: '{grouping=~".+"} |= "$${__span.traceId}"'
      tracesToMetrics:
        datasourceUid: prometheus
        spanStartTimeShift: 30m
        spanEndTimeShift: -30m
        tags:
          - key: service.name
            value: service
        queries:
          - name: Calls
            query: sum(rate(traces_spanmetrics_calls_total{$${__tags}}[5m])) by (span_name)
          - name: Latency
            query: histogram_quantile(0.5, sum(rate(traces_spanmetrics_latency_bucket{$${__tags}}[5m])) by (le, span_name))
      serviceMap:
        datasourceUid: prometheus
      nodeGraph:
        enabled: true
