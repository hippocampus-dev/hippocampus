apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qdrant
spec:
  replicas: 3
  template:
    metadata:
      labels:
        sidecar.istio.io/inject: "true"
      annotations:
        sidecar.istio.io/proxyCPULimit: 1000m
        sidecar.istio.io/proxyMemoryLimit: 128Mi
        sidecar.istio.io/proxyCPU: 30m
        sidecar.istio.io/proxyMemory: 64Mi
        prometheus.io/scrape: "true"
        prometheus.io/scheme: http
        prometheus.io/port: "6333"
        prometheus.io/path: /metrics
        traffic.sidecar.istio.io/excludeOutboundPorts: "6335"
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: qdrant
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          #whenUnsatisfiable: DoNotSchedule
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: qdrant
      containers:
        - name: qdrant
          env:
            - name: RUN_MODE
              value: development
          volumeMounts:
            - name: qdrant
              mountPath: /working/config
              readOnly: true
            - name: storage
              mountPath: /qdrant/storage
            - name: snapshots
              mountPath: /qdrant/snapshots
      volumes:
        - name: qdrant
          configMap:
            name: qdrant
        - name: snapshots
          #persistentVolumeClaim:
          #  claimName: qdrant-snapshots
          emptyDir:
            medium: Memory
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Delete
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
