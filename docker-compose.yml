services:
  ephemeral-container:
    image: ghcr.io/kaidotio/hippocampus/ephemeral-container:main
    entrypoint:
      - tail
      - -f
      - /dev/null
    extra_hosts:
      - "host.docker.internal:host-gateway"
  llama.cpp:
    profiles:
      - llama.cpp
      - full
    build:
      dockerfile: Dockerfile
      context: llama.cpp
    develop:
      watch:
        - action: rebuild
          path: llama.cpp/Dockerfile
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "8080:8080"
    command:
      - -ngl
      - "32"
      - -m
      - models/Phi-3-mini-4k-instruct-q4.gguf
      - --chat-template
      - phi3
      - --host
      - 0.0.0.0
    volumes:
      - type: volume
        source: llama.cpp-models
        target: /home/nonroot/llama.cpp/models
  llama.cpp-chown:
    profiles:
      - llama.cpp
      - full
    image: debian:bookworm-slim
    entrypoint:
      - chown
      - -R
      - nonroot:nonroot
      - /home/nonroot/models
    volumes:
      - type: volume
        source: llama.cpp-models
        target: /home/nonroot/models
  llama.cpp-downloader:
    profiles:
      - llama.cpp
      - full
    build:
      dockerfile: Dockerfile
      context: llama.cpp/downloader
    develop:
      watch:
        - action: rebuild
          path: llama.cpp/downloader/Dockerfile
    volumes:
      - type: volume
        source: llama.cpp-models
        target: /home/nonroot/models
    depends_on:
      llama.cpp-chown:
        condition: service_completed_successfully
  stable-diffusion-webui:
    profiles:
      - stable-diffusion-webui
      - full
    build:
      dockerfile: Dockerfile
      context: stable-diffusion-webui
    develop:
      watch:
        - action: rebuild
          path: stable-diffusion-webui/Dockerfile
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    command:
      - --allow-code
      - --medvram
      - --enable-insecure-extension-access
      - --api
      - --listen
      - --ckpt=models/Stable-diffusion/v1-5-pruned-emaonly.ckpt
    environment:
      - SD_WEBUI_CACHE_FILE=/home/nonroot/stable-diffusion-webui/models/.cache/cache.json
      - HUGGINGFACE_HUB_CACHE=/home/nonroot/stable-diffusion-webui/models/.cache/huggingface
    volumes:
      - type: bind
        source: ./stable-diffusion-webui/styles.csv
        target: /home/nonroot/stable-diffusion-webui/styles.csv
        read_only: true
      - type: volume
        source: stable-diffusion-models
        target: /home/nonroot/stable-diffusion-webui/models
      - type: volume
        source: controlnet
        target: /home/nonroot/stable-diffusion-webui/extensions/sd-webui-controlnet/models
  stable-diffusion-webui-downloader:
    profiles:
      - stable-diffusion-webui
      - full
    build:
      dockerfile: Dockerfile
      context: stable-diffusion-webui/downloader
    develop:
      watch:
        - action: rebuild
          path: stable-diffusion-webui/downloader/Dockerfile
    volumes:
      - type: volume
        source: stable-diffusion-models
        target: /home/nonroot/models
      - type: volume
        source: controlnet
        target: /home/nonroot/extensions/sd-webui-controlnet/models
  httpbin:
    image: kennethreitz/httpbin:latest
  mitmproxy:
    network_mode: host
    tty: true
    image: mitmproxy/mitmproxy:9.0.1
    command:
      - mitmweb
      - --listen-port=18080
      - --web-host=0.0.0.0
      - --web-port=18081
      - --set=ssl_verify_upstream_trusted_ca=/home/mitmproxy/.mkcert/rootCA.pem
      - --set=ssl_verify_upstream_trusted_confdir=/etc/ssl/certs
    volumes:
      - /home/kai/.local/share/mkcert:/home/mitmproxy/.mkcert
      - ./.mitmproxy:/home/mitmproxy/.mitmproxy
  # Datastore
  gcs:
    image: fsouza/fake-gcs-server:1.37
    command:
      - -scheme
      - http
    volumes:
      - type: volume
        source: tokens
        target: /data/kaidotio-tokens
  minio:
    image: minio/minio:RELEASE.2023-05-04T21-44-30Z
    command:
      - server
      - /var/minio
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniominio
    ports:
      - "9000:9000"
  mc:
    image: minio/mc:RELEASE.2023-05-04T18-10-16Z
    tty: true
    entrypoint:
      - sh
      - -c
    command:
      - |
        mc mb -p minio/cortex-bot
        mc mb -p minio/whisper-worker
        mc mb -p minio/embedding-gateway
    environment:
      MC_HOST_minio: http://minio:miniominio@minio:9000
    depends_on:
      minio:
        condition: service_started
  redis:
    image: redis/redis-stack:6.2.6-v6
    ports:
      - "6379:6379"
  cassandra:
    image: cassandra:4.0
    ports:
      - "9042:9042"
    environment:
      - HEAP_NEWSIZE=128M
      - MAX_HEAP_SIZE=1G
  qdrant:
    image: qdrant/qdrant:v1.10.0
    ports:
      - "6333:6333"
      - "6334:6334"
  influxdb:
    image: influxdb:1.8
    environment:
      - INFLUXDB_DB=hippocampus
    ports:
      - "8086:8086"
  # Observability
  jaeger:
    image: jaegertracing/all-in-one:1.32
  opentelemetry-collector:
    image: otel/opentelemetry-collector:0.50.0
    command:
      - --config=/etc/opentelemetry-collector.yaml
    volumes:
      - type: bind
        source: ./volumes/opentelemetry-collector.yaml
        target: /etc/opentelemetry-collector.yaml
        read_only: true
    depends_on:
      jaeger:
        condition: service_started
  node-exporter:
    image: quay.io/prometheus/node-exporter:v1.6.0
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.tcpstat
    volumes:
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
  prometheus:
    image: prom/prometheus:v2.37.9
    depends_on:
      node-exporter:
        condition: service_started
    volumes:
      - type: bind
        source: ./volumes/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
  k6:
    network_mode: host
    image: grafana/k6:0.51.0
    entrypoint:
      - tail
      - -f
      - /dev/null
    environment:
      - K6_OUT=influxdb=http://127.0.0.1:8086/hippocampus
  grafana:
    image: grafana/grafana:9.5.2
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Editor
    depends_on:
      prometheus:
        condition: service_started
    volumes:
      - type: bind
        source: ./volumes/grafana.ini
        target: /etc/grafana/grafana.ini
        read_only: true
      - type: bind
        source: ./volumes/dashboardproviders.yaml
        target: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
        read_only: true
      - type: bind
        source: ./volumes/datasource.yaml
        target: /etc/grafana/provisioning/datasources/datasource.yaml
        read_only: true
      - type: bind
        source: ./volumes/overview.json
        target: /var/lib/grafana/dashboards/system/overview.json
        read_only: true
      - type: bind
        source: ./volumes/k6.json
        target: /var/lib/grafana/dashboards/application/k6.json
        read_only: true
  # Gateway
  envoy:
    build:
      dockerfile: Dockerfile
      context: envoy
    develop:
      watch:
        - action: rebuild
          path: envoy/Dockerfile
    user: 1000:1000
    ports:
      - "80:10080"
      - "443:10443"
      - "9901:9901"
    volumes:
      - type: bind
        source: ./envoy/envoy.yaml
        target: /etc/envoy/envoy.yaml
        read_only: true
      - type: bind
        source: /var/certs/_wildcard.127.0.0.1.nip.io.pem
        target: /var/certs/_wildcard.127.0.0.1.nip.io.pem
        read_only: true
      - type: bind
        source: /var/certs/_wildcard.127.0.0.1.nip.io-key.pem
        target: /var/certs/_wildcard.127.0.0.1.nip.io-key.pem
        read_only: true
      - type: bind
        source: /var/certs/_wildcard.minikube.127.0.0.1.nip.io.pem
        target: /var/certs/_wildcard.minikube.127.0.0.1.nip.io.pem
        read_only: true
      - type: bind
        source: /var/certs/_wildcard.minikube.127.0.0.1.nip.io-key.pem
        target: /var/certs/_wildcard.minikube.127.0.0.1.nip.io-key.pem
        read_only: true
    depends_on:
      jaeger:
        condition: service_started
      opentelemetry-collector:
        condition: service_started
      gcs:
        condition: service_started
      httpbin:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
  mirror-registry-dockerio:
    image: registry:2
    ports:
      - "5000:5000"
    environment:
      - REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io
    volumes:
      - type: bind
        source: ./volumes/registry-dockerio.yml
        target: /etc/docker/registry/config.yml
        read_only: true
      - type: volume
        source: registry-dockerio
        target: /var/lib/registry
  mirror-registry-ghcrio:
    image: registry:2
    ports:
      - "5002:5002"
    environment:
      - REGISTRY_PROXY_REMOTEURL=https://ghcr.io
      - REGISTRY_PROXY_USERNAME=kaidotio
      - REGISTRY_PROXY_PASSWORD=${GITHUB_TOKEN}
    volumes:
      - type: bind
        source: ./volumes/registry-ghcrio.yml
        target: /etc/docker/registry/config.yml
        read_only: true
      - type: volume
        source: registry-ghcrio
        target: /var/lib/registry

volumes:
  tokens: {}
  llama.cpp-models: {}
  stable-diffusion-models: {}
  controlnet: {}
  registry-dockerio: {}
  registry-ghcrio: {}
